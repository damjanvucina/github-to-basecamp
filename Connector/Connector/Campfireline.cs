// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: campfireline.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Connector.Protobuf {

  /// <summary>Holder for reflection information generated from campfireline.proto</summary>
  public static partial class CampfirelineReflection {

    #region Descriptor
    /// <summary>File descriptor for campfireline.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CampfirelineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJjYW1wZmlyZWxpbmUucHJvdG8SCHR1dG9yaWFsIu0BCgxDYW1wZmlyZUxp",
            "bmUSMwoHbWVzc2FnZRgBIAMoCzIiLnR1dG9yaWFsLkNhbXBmaXJlTGluZS5N",
            "ZXNzYWdlRGF0YRItCgRkYXRhGAIgAygLMh8udHV0b3JpYWwuQ2FtcGZpcmVM",
            "aW5lLkxpbmVEYXRhGhsKC01lc3NhZ2VEYXRhEgwKBHR5cGUYASABKAkaXAoI",
            "TGluZURhdGESEQoJY29tbWl0U2hhGAEgASgJEhYKDmNhbXBmaXJlTGluZUlk",
            "GAIgASgJEhIKCmNhbXBmaXJlSWQYAyABKAkSEQoJcHJvamVjdElkGAQgASgJ",
            "QhWqAhJDb25uZWN0b3IuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Connector.Protobuf.CampfireLine), global::Connector.Protobuf.CampfireLine.Parser, new[]{ "Message", "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Connector.Protobuf.CampfireLine.Types.MessageData), global::Connector.Protobuf.CampfireLine.Types.MessageData.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connector.Protobuf.CampfireLine.Types.LineData), global::Connector.Protobuf.CampfireLine.Types.LineData.Parser, new[]{ "CommitSha", "CampfireLineId", "CampfireId", "ProjectId" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// [START messages]
  /// </summary>
  public sealed partial class CampfireLine : pb::IMessage<CampfireLine> {
    private static readonly pb::MessageParser<CampfireLine> _parser = new pb::MessageParser<CampfireLine>(() => new CampfireLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CampfireLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connector.Protobuf.CampfirelineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CampfireLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CampfireLine(CampfireLine other) : this() {
      message_ = other.message_.Clone();
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CampfireLine Clone() {
      return new CampfireLine(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Connector.Protobuf.CampfireLine.Types.MessageData> _repeated_message_codec
        = pb::FieldCodec.ForMessage(10, global::Connector.Protobuf.CampfireLine.Types.MessageData.Parser);
    private readonly pbc::RepeatedField<global::Connector.Protobuf.CampfireLine.Types.MessageData> message_ = new pbc::RepeatedField<global::Connector.Protobuf.CampfireLine.Types.MessageData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Connector.Protobuf.CampfireLine.Types.MessageData> Message {
      get { return message_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Connector.Protobuf.CampfireLine.Types.LineData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Connector.Protobuf.CampfireLine.Types.LineData.Parser);
    private readonly pbc::RepeatedField<global::Connector.Protobuf.CampfireLine.Types.LineData> data_ = new pbc::RepeatedField<global::Connector.Protobuf.CampfireLine.Types.LineData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Connector.Protobuf.CampfireLine.Types.LineData> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CampfireLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CampfireLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!message_.Equals(other.message_)) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= message_.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      message_.WriteTo(output, _repeated_message_codec);
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += message_.CalculateSize(_repeated_message_codec);
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CampfireLine other) {
      if (other == null) {
        return;
      }
      message_.Add(other.message_);
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            message_.AddEntriesFrom(input, _repeated_message_codec);
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CampfireLine message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MessageData : pb::IMessage<MessageData> {
        private static readonly pb::MessageParser<MessageData> _parser = new pb::MessageParser<MessageData>(() => new MessageData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MessageData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Connector.Protobuf.CampfireLine.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageData(MessageData other) : this() {
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageData Clone() {
          return new MessageData(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private string type_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type {
          get { return type_; }
          set {
            type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MessageData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MessageData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type.Length != 0) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MessageData other) {
          if (other == null) {
            return;
          }
          if (other.Type.Length != 0) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Type = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LineData : pb::IMessage<LineData> {
        private static readonly pb::MessageParser<LineData> _parser = new pb::MessageParser<LineData>(() => new LineData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LineData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Connector.Protobuf.CampfireLine.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LineData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LineData(LineData other) : this() {
          commitSha_ = other.commitSha_;
          campfireLineId_ = other.campfireLineId_;
          campfireId_ = other.campfireId_;
          projectId_ = other.projectId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LineData Clone() {
          return new LineData(this);
        }

        /// <summary>Field number for the "commitSha" field.</summary>
        public const int CommitShaFieldNumber = 1;
        private string commitSha_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CommitSha {
          get { return commitSha_; }
          set {
            commitSha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "campfireLineId" field.</summary>
        public const int CampfireLineIdFieldNumber = 2;
        private string campfireLineId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CampfireLineId {
          get { return campfireLineId_; }
          set {
            campfireLineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "campfireId" field.</summary>
        public const int CampfireIdFieldNumber = 3;
        private string campfireId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CampfireId {
          get { return campfireId_; }
          set {
            campfireId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "projectId" field.</summary>
        public const int ProjectIdFieldNumber = 4;
        private string projectId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProjectId {
          get { return projectId_; }
          set {
            projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LineData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LineData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CommitSha != other.CommitSha) return false;
          if (CampfireLineId != other.CampfireLineId) return false;
          if (CampfireId != other.CampfireId) return false;
          if (ProjectId != other.ProjectId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CommitSha.Length != 0) hash ^= CommitSha.GetHashCode();
          if (CampfireLineId.Length != 0) hash ^= CampfireLineId.GetHashCode();
          if (CampfireId.Length != 0) hash ^= CampfireId.GetHashCode();
          if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CommitSha.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CommitSha);
          }
          if (CampfireLineId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CampfireLineId);
          }
          if (CampfireId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(CampfireId);
          }
          if (ProjectId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ProjectId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CommitSha.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitSha);
          }
          if (CampfireLineId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CampfireLineId);
          }
          if (CampfireId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CampfireId);
          }
          if (ProjectId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LineData other) {
          if (other == null) {
            return;
          }
          if (other.CommitSha.Length != 0) {
            CommitSha = other.CommitSha;
          }
          if (other.CampfireLineId.Length != 0) {
            CampfireLineId = other.CampfireLineId;
          }
          if (other.CampfireId.Length != 0) {
            CampfireId = other.CampfireId;
          }
          if (other.ProjectId.Length != 0) {
            ProjectId = other.ProjectId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CommitSha = input.ReadString();
                break;
              }
              case 18: {
                CampfireLineId = input.ReadString();
                break;
              }
              case 26: {
                CampfireId = input.ReadString();
                break;
              }
              case 34: {
                ProjectId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
